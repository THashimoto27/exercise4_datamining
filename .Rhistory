library(gapminder)
library(mosaic)
library(extraDistr)
library(caret)
library(modelr)
library(parallel)
library(foreach)
library(rsample)
library(lubridate)
library(olsrr)
library(rpart)
library(rpart.plot)
library(randomForest)
library(gbm)
library(gamlr)
data <- social_marketing[-1]
data <- data %>% mutate(spam == 1 ifelse(spam>1))
data <- data %>% mutate(spam == 1 if(spam>1))
data <- data %>% mutate(spam = ifelse(spam>1,1,0))
View(data)
logit_spam = glm(spam ~ ., data=data, family='binomial')
phat_test_logit_spam = predict(logit_spam, spamtest, type='response')
phat_test_logit_spam = predict(logit_spam, data, type='response')
yhat_test_logit_spam = ifelse(phat_test_logit_spam > 0.5, 1, 0)
confusion_out_logit = table(y = data$spma,
yhat = yhat_test_logit_spam)
phat_test_logit_spam = predict(logit_spam, data, type='response')
yhat_test_logit_spam = ifelse(phat_test_logit_spam > 0.5, 1, 0)
confusion_out_logit = table(y = data$spam,
yhat = yhat_test_logit_spam)
confusion_out_logit
confusion_out_logit[]1,1
confusion_out_logit[1,1]
precision=1-(confusion_out_logit[2,1]/confusion_out_logit[2,1]+confusion_out_logit[2,2])
precision
confusion_out_logit[2,1]
confusion_out_logit[2,2]
confusion_out_logit[2,1]
(confusion_out_logit[2,1]/(confusion_out_logit[2,1]+confusion_out_logit[2,2]))
precision=1-(confusion_out_logit[2,1]/(confusion_out_logit[2,1]+confusion_out_logit[2,2]))
data <- data %>% mutate(spam = ifelse(spam>=1,1,0))
logit_spam = glm(spam ~ ., data=data, family='binomial')
phat_test_logit_spam = predict(logit_spam, data, type='response')
yhat_test_logit_spam = ifelse(phat_test_logit_spam > 0.5, 1, 0)
confusion_out_logit = table(y = data$spam,
yhat = yhat_test_logit_spam)
confusion_out_logit
View(data)
data <- social_marketing[-1]
data <- data %>% mutate(spam = ifelse(spam>=1,1,0))
logit_spam = glm(spam ~ ., data=data, family='binomial')
phat_test_logit_spam = predict(logit_spam, data, type='response')
yhat_test_logit_spam = ifelse(phat_test_logit_spam > 0.5, 1, 0)
confusion_out_logit = table(y = data$spam,
yhat = yhat_test_logit_spam)
confusion_out_logit
precision=1-(confusion_out_logit[2,1]/(confusion_out_logit[2,1]+confusion_out_logit[2,2]))
precision
data = social_marketing[-1]
lm_spam = lm(y ~ ., data=data)
data = social_marketing[-1]
lm_spam = lm(spam ~ ., data=data)
phat_train_spam = predict(lm_spam, spamfit)
data = social_marketing[-1]
lm_spam = lm(spam ~ ., data=data)
phat_train_spam = predict(lm_spam, data)
yhat_train_spam = ifelse(phat_train_spam1 > 0.5, 1, 0)
data = social_marketing[-1]
lm_spam = lm(spam ~ ., data=data)
phat_train_spam = predict(lm_spam, data)
yhat_train_spam = ifelse(phat_train_spam > 0.5, 1, 0)
confusion_in = table(y = data$spam, yhat = yhat_train_spam)
confusion_in
precision_lg=1-(confusion_in[2,1]/(confusion_in[2,1]+confusion_in[2,2]))
precision_in=1-(confusion_in[2,1]/(confusion_in[2,1]+confusion_in[2,2]))
confusion_in
lm_spam = lm(spam ~ ., data=data)
phat_train_spam = predict(lm_spam, data)
yhat_train_spam = ifelse(phat_train_spam > 0.5, 1, 0)
confusion_in = table(y = data$spam, yhat = yhat_train_spam)
precision_in=1-(confusion_in[2,1]/(confusion_in[2,1]+confusion_in[2,2]))
data <- social_marketing[-1]
data <- data %>% mutate(spam = ifelse(spam>=1,1,0))
lm_spam = lm(spam ~ ., data=data)
phat_train_spam = predict(lm_spam, data)
yhat_train_spam = ifelse(phat_train_spam > 0.5, 1, 0)
confusion_in = table(y = data$spam, yhat = yhat_train_spam)
precision_in=1-(confusion_in[2,1]/(confusion_in[2,1]+confusion_in[2,2]))
confusion_in
lm_spam = lm(spam ~ ., data=data)
phat_train_spam = predict(lm_spam, data)
yhat_train_spam = ifelse(phat_train_spam > 0.5, 1, 0)
confusion_in = table(y = data$spam, yhat = yhat_train_spam)
precision_in
confusion_in
lm_spam = lm(spam ~ ., data=data)
phat_train_spam = predict(lm_spam, data)
yhat_train_spam = ifelse(phat_train_spam > 0.4, 1, 0)
confusion_in = table(y = data$spam, yhat = yhat_train_spam)
precision_in=1-(confusion_in[2,1]/(confusion_in[2,1]+confusion_in[2,2]))
confusion_in
yhat_train_spam = ifelse(phat_train_spam > 0.1, 1, 0)
confusion_in = table(y = data$spam, yhat = yhat_train_spam)
confusion_in
precision_in=1-(confusion_in[2,1]/(confusion_in[2,1]+confusion_in[2,2]))
precision_in
lm_spam = lm(spam ~ ., data=data)
phat_train_spam = predict(lm_spam, data)
yhat_train_spam = ifelse(phat_train_spam > 0.2, 1, 0)
confusion_in = table(y = data$spam, yhat = yhat_train_spam)
precision_in
precision_in=1-(confusion_in[2,1]/(confusion_in[2,1]+confusion_in[2,2]))
precision_in
lm_spam = lm(spam ~ ., data=data)
phat_train_spam = predict(lm_spam, data)
yhat_train_spam = ifelse(phat_train_spam > 0.3, 1, 0)
confusion_in = table(y = data$spam, yhat = yhat_train_spam)
precision_in=1-(confusion_in[2,1]/(confusion_in[2,1]+confusion_in[2,2]))
precision_in
## LPM
lm_spam = lm(spam ~ ., data=data)
phat_train_spam = predict(lm_spam, data)
yhat_train_spam = ifelse(phat_train_spam > 0.4, 1, 0)
confusion_in = table(y = data$spam, yhat = yhat_train_spam)
precision_in=1-(confusion_in[2,1]/(confusion_in[2,1]+confusion_in[2,2]))
lm_spam = lm(spam ~ ., data=data)
phat_train_spam = predict(lm_spam, data)
yhat_train_spam = ifelse(phat_train_spam > 0.4, 1, 0)
confusion_in = table(y = data$spam, yhat = yhat_train_spam)
precision_in=1-(confusion_in[2,1]/(confusion_in[2,1]+confusion_in[2,2]))
lm_spam = lm(spam ~ ., data=data)
phat_train_spam = predict(lm_spam, data)
yhat_train_spam = ifelse(phat_train_spam > 0.35, 1, 0)
confusion_in = table(y = data$spam, yhat = yhat_train_spam)
precision_in=1-(confusion_in[2,1]/(confusion_in[2,1]+confusion_in[2,2]))
logit_spam = glm(spam ~ .+adult^2, data=data, family='binomial')
phat_test_logit_spam = predict(logit_spam, data, type='response')
yhat_test_logit_spam = ifelse(phat_test_logit_spam > 0.5, 1, 0)
confusion_out_logit = table(y = data$spam,
yhat = yhat_test_logit_spam)
confusion_out_logit
precision_out=1-(confusion_out_logit[2,1]/(confusion_out_logit[2,1]+confusion_out_logit[2,2]))
precision_out
logit_spam = glm(spam ~ ., data=data, family='binomial')
phat_test_logit_spam = predict(logit_spam, data, type='response')
yhat_test_logit_spam = ifelse(phat_test_logit_spam > 0.5, 1, 0)
confusion_out_logit = table(y = data$spam,
yhat = yhat_test_logit_spam)
confusion_out_logit
precision_out=1-(confusion_out_logit[2,1]/(confusion_out_logit[2,1]+confusion_out_logit[2,2]))
phat_test_logit_spam = predict(logit_spam, data, type='response')
yhat_test_logit_spam = ifelse(phat_test_logit_spam > 0.5, 1, 0)
confusion_out_logit = table(y = data$spam,
yhat = yhat_test_logit_spam)
precision_out=1-(confusion_out_logit[2,1]/(confusion_out_logit[2,1]+confusion_out_logit[2,2]))
precision_out
logit_spam = glm(spam ~ .+adult^2, data=data, family='binomial')
phat_test_logit_spam = predict(logit_spam, data, type='response')
yhat_test_logit_spam = ifelse(phat_test_logit_spam > 0.5, 1, 0)
confusion_out_logit = table(y = data$spam,
yhat = yhat_test_logit_spam)
precision_out=1-(confusion_out_logit[2,1]/(confusion_out_logit[2,1]+confusion_out_logit[2,2]))
precision_out
View(data)
logit_spam = glm(spam ~ .+adult^2+chatter^2, data=data, family='binomial')
phat_test_logit_spam = predict(logit_spam, data, type='response')
yhat_test_logit_spam = ifelse(phat_test_logit_spam > 0.5, 1, 0)
confusion_out_logit = table(y = data$spam,
yhat = yhat_test_logit_spam)
precision_out=1-(confusion_out_logit[2,1]/(confusion_out_logit[2,1]+confusion_out_logit[2,2]))
precision_out
logit_spam = glm(spam ~ adult^2+chatter^2, data=data, family='binomial')
phat_test_logit_spam = predict(logit_spam, data, type='response')
yhat_test_logit_spam = ifelse(phat_test_logit_spam > 0.5, 1, 0)
confusion_out_logit = table(y = data$spam,
yhat = yhat_test_logit_spam)
precision_out=1-(confusion_out_logit[2,1]/(confusion_out_logit[2,1]+confusion_out_logit[2,2]))
precision_out
logit_spam = glm(spam ~ adult^2+chatter^2, data=data, family='binomial')
phat_test_logit_spam = predict(logit_spam, data, type='response')
yhat_test_logit_spam = ifelse(phat_test_logit_spam > 0.5, 1, 0)
confusion_out_logit = table(y = data$spam,
yhat = yhat_test_logit_spam)
precision_out=1-(confusion_out_logit[2,1]/(confusion_out_logit[2,1]+confusion_out_logit[2,2]))
precision_out
logit_spam = glm(spam ~ adult^2+chatter^2, data=data, family='binomial')
phat_test_logit_spam = predict(logit_spam, data, type='response')
yhat_test_logit_spam = ifelse(phat_test_logit_spam > 0.5, 1, 0)
confusion_out_logit = table(y = data$spam,
yhat = yhat_test_logit_spam)
precision_out=1-(confusion_out_logit[2,1]/(confusion_out_logit[2,1]+confusion_out_logit[2,2]))
precision_out
logit_spam = glm(spam ~ ., data=data, family='binomial')
phat_test_logit_spam = predict(logit_spam, data, type='response')
yhat_test_logit_spam = ifelse(phat_test_logit_spam > 0.5, 1, 0)
confusion_out_logit = table(y = data$spam,
yhat = yhat_test_logit_spam)
precision_out=1-(confusion_out_logit[2,1]/(confusion_out_logit[2,1]+confusion_out_logit[2,2]))
precision_out
lm_spam = lm(spam ~ ., data=social_marketing[-1])
phat_train_spam1 = predict(lm_spam, social_marketing[-1])
yhat_train_spam1 = ifelse(phat_train_spam1 > 0.5, 1, 0)
confusion_in = table(y = datat$spam, yhat = yhat_train_spam1)
lm_spam = lm(spam ~ ., data=social_marketing[-1])
phat_train_spam1 = predict(lm_spam, social_marketing[-1])
yhat_train_spam1 = ifelse(phat_train_spam1 > 0.5, 1, 0)
confusion_in = table(y = data$spam, yhat = yhat_train_spam1)
precision_in=1-(confusion_in[2,1]/(confusion_in[2,1]+confusion_in[2,2]))
confusion_in
lm_spam = lm(spam ~ ., data=social_marketing[-1])
phat_train_spam1 = predict(lm_spam, social_marketing[-1])
yhat_train_spam1 = ifelse(phat_train_spam1 > 0.4, 1, 0)
confusion_in = table(y = data$spam, yhat = yhat_train_spam1)
precision_in
confusion_in
lm_spam = lm(spam ~ ., data=social_marketing[-1])
phat_train_spam1 = predict(lm_spam, social_marketing[-1])
yhat_train_spam1 = ifelse(phat_train_spam1 > 0.3, 1, 0)
confusion_in
lm_spam = lm(spam ~ ., data=social_marketing[-1])
phat_train_spam1 = predict(lm_spam, social_marketing[-1])
yhat_train_spam1 = ifelse(phat_train_spam1 > 0.2, 1, 0)
confusion_in
phat_train_spam1
phat_train_spam1 = predict(lm_spam, social_marketing[-1])
yhat_train_spam1 = ifelse(phat_train_spam1 > 0.1, 1, 0)
confusion_in = table(y = data$spam, yhat = yhat_train_spam1)
confusion_in
## LM
lm_spam = lm(spam ~ ., data=social_marketing[-1])
phat_train_spam1 = predict(lm_spam, social_marketing[-1])
yhat_train_spam1 = ifelse(phat_train_spam1 > 0.2, 1, 0)
confusion_in = table(y = data$spam, yhat = yhat_train_spam1)
precision_in=1-(confusion_in[2,1]/(confusion_in[2,1]+confusion_in[2,2]))
precision_in
lm_spam = lm(spam ~ ., data=social_marketing[-1])
phat_train_spam1 = predict(lm_spam, social_marketing[-1])
yhat_train_spam1 = ifelse(phat_train_spam1 > 0.3, 1, 0)
confusion_in = table(y = data$spam, yhat = yhat_train_spam1)
precision_in=1-(confusion_in[2,1]/(confusion_in[2,1]+confusion_in[2,2]))
precision_in
lm_spam = lm(spam ~ ., data=social_marketing[-1])
phat_train_spam1 = predict(lm_spam, social_marketing[-1])
yhat_train_spam1 = ifelse(phat_train_spam1 > 0.1, 1, 0)
confusion_in = table(y = data$spam, yhat = yhat_train_spam1)
precision_in=1-(confusion_in[2,1]/(confusion_in[2,1]+confusion_in[2,2]))
precision_in
lm_spam = lm(spam ~ ., data=social_marketing[-1])
phat_train_spam1 = predict(lm_spam, social_marketing[-1])
yhat_train_spam1 = ifelse(phat_train_spam1 > 0.05, 1, 0)
confusion_in = table(y = data$spam, yhat = yhat_train_spam1)
precision_in=1-(confusion_in[2,1]/(confusion_in[2,1]+confusion_in[2,2]))
precision_in
lm_spam = lm(spam ~ ., data=social_marketing[-1])
phat_train_spam1 = predict(lm_spam, social_marketing[-1])
yhat_train_spam1 = ifelse(phat_train_spam1 > 0.06, 1, 0)
confusion_in = table(y = data$spam, yhat = yhat_train_spam1)
precision_in=1-(confusion_in[2,1]/(confusion_in[2,1]+confusion_in[2,2]))
precision_in
lm_spam = lm(spam ~ ., data=social_marketing[-1])
phat_train_spam1 = predict(lm_spam, social_marketing[-1])
yhat_train_spam1 = ifelse(phat_train_spam1 > 0.05, 1, 0)
confusion_in = table(y = data$spam, yhat = yhat_train_spam1)
precision_in=1-(confusion_in[2,1]/(confusion_in[2,1]+confusion_in[2,2]))
precision_in
lm_spam = lm(spam ~ ., data=social_marketing[-1])
phat_train_spam1 = predict(lm_spam, social_marketing[-1])
yhat_train_spam1 = ifelse(phat_train_spam1 > 0.055, 1, 0)
confusion_in = table(y = data$spam, yhat = yhat_train_spam1)
precision_in=1-(confusion_in[2,1]/(confusion_in[2,1]+confusion_in[2,2]))
precision_in
lm_spam = lm(spam ~ ., data=social_marketing[-1])
phat_train_spam1 = predict(lm_spam, social_marketing[-1])
yhat_train_spam1 = ifelse(phat_train_spam1 > 0.051, 1, 0)
confusion_in = table(y = data$spam, yhat = yhat_train_spam1)
precision_in=1-(confusion_in[2,1]/(confusion_in[2,1]+confusion_in[2,2]))
precision_in
lm_spam = lm(spam ~ ., data=social_marketing[-1])
phat_train_spam1 = predict(lm_spam, social_marketing[-1])
yhat_train_spam1 = ifelse(phat_train_spam1 > 0.055, 1, 0)
confusion_in = table(y = data$spam, yhat = yhat_train_spam1)
precision_in=1-(confusion_in[2,1]/(confusion_in[2,1]+confusion_in[2,2]))
precision_in
logit_spam = glm(spam ~ ., data=data, family='binomial')
phat_test_logit_spam = predict(logit_spam, data, type='response')
yhat_test_logit_spam = ifelse(phat_test_logit_spam > 0.5, 1, 0)
confusion_out_logit = table(y = data$spam,
yhat = yhat_test_logit_spam)
precision_out=1-(confusion_out_logit[2,1]/(confusion_out_logit[2,1]+confusion_out_logit[2,2]))
precision_out
yhat
yhat_test_logit_spam
yhat <- as.data.frame(c(social_marketing[1],yhat_test_logit_spam))
View(yhat)
yhat <- as.data.frame(cbind(social_marketing[1],yhat_test_logit_spam))
View(yhat)
View(social_marketing)
yhat <- as.data.frame(cbind(social_marketing,yhat_test_logit_spam), )
yhat <- as.data.frame(cbind(social_marketing,yhat_test_logit_spam))
View(yhat)
yhat <- yhat %>% mutate(spam2 = if(yhat_test_logit_spam==1 | spam==1,1,0))
yhat <- yhat %>% mutate(spam2 = if((yhat_test_logit_spam==1) | (spam==1),1,0))
yhat <- yhat %>% mutate(spam2 = if((yhat_test_logit_spam=1) | (spam=1),1,0))
yhat <- as.data.frame(cbind(social_marketing,yhat_test_logit_spam))
yhat <- yhat %>% mutate(spam2 = if(((yhat_test_logit_spam=1) | (spam=1)),1,0))
yhat <- yhat %>% mutate(spam2 = ifesle(yhat_test_logit_spam==1 | spam==1,1,0))
yhat <- yhat %>% mutate(spam2 = ifelse(yhat_test_logit_spam==1 | spam==1,1,0))
View(yhat)
yhat <- as.data.frame(cbind(social_marketing,yhat_test_logit_spam))
yhat <- yhat %>% mutate(spam = ifelse(yhat_test_logit_spam==1 | spam==1,1,0))
View(yhat)
ndata <- as.data.frame(cbind(social_marketing,yhat_test_logit_spam))
ndata <- ndata %>% mutate(spam = ifelse(yhat_test_logit_spam==1 | spam==1,1,0))
ndata <- ndata[-38]
View(ndata)
ndata <- ndata %>% filter(spam!==1 | adult !>=1)
ndata <- ndata %>% filter(spam!=1 | adult !>=1)
ndata <- ndata %>% filter(spam==0 | adult ==0)
View(ndata)
newdata <- ndata %>% filter(spam==0 & adult ==0)
ndata <- ndata %>% filter(spam==0 & adult ==0)
social_marketing <- read.csv("social_marketing.csv")
## Logit
# First normalize phrase counts to phrase frequencies.
data <- social_marketing[-1]/rowSums(social_marketing[-1])
data <- data %>% mutate(spam = ifelse(spam>=1,1,0))
logit_spam = glm(spam ~ ., data=data, family='binomial')
phat_test_logit_spam = predict(logit_spam, data, type='response')
yhat_test_logit_spam = ifelse(phat_test_logit_spam > 0.5, 1, 0)
confusion_out_logit = table(y = data$spam,
yhat = yhat_test_logit_spam)
precision_out=1-(confusion_out_logit[2,1]/(confusion_out_logit[2,1]+confusion_out_logit[2,2]))
yhat = yhat_test_logit_spam)
phat_test_logit_spam = predict(logit_spam, data, type='response')
yhat_test_logit_spam = ifelse(phat_test_logit_spam > 0.5, 1, 0)
confusion_out_logit = table(y = data$spam,
yhat = yhat_test_logit_spam)
precision_out
confusion_out_logit
View(data)
ndata = ndata/rowSums(ndata)
Z = ndata/rowSums(ndata)
View(ndata)
Z = ndata[-1]/rowSums(ndata[-1])
pc2 = prcomp(Z, scale=TRUE, rank=2)
View(data)
ndata <- ndata %>% filter(spam==0) %>% filter (adult==0)
ndata <- ndata %>% filter(spam==0) %>% filter (adult==0)
Z = ndata[-1]/rowSums(ndata[-1])
pc2 = prcomp(Z, scale=TRUE, rank=2)
View(Z)
Z =Z[-36]
Z =Z[-35]
pc2 = prcomp(Z, scale=TRUE, rank=2)
View(pc2)
loadings = pc2$rotation
scores = pc2$x
View(loadings)
scores
ggcorrplot(cor(Z), hc.order = TRUE)
ggcorrplot::ggcorrplot(cor(Z), hc.order = TRUE)
k_grid = seq(2, 30, by=1)
SSE_grid = foreach(k = k_grid, .combine='c') %do% {
cluster_k = kmeans(X, k, nstart=50)
cluster_k$tot.withinss
}
k_grid = seq(2, 30, by=1)
SSE_grid = foreach(k = k_grid, .combine='c') %do% {
cluster_k = kmeans(Z, k, nstart=50)
cluster_k$tot.withinss
}
k_grid = seq(2, 30, by=1)
N = nrow(X)
k_grid = seq(2, 30, by=1)
N = nrow(Z)
CH_grid = foreach(k = k_grid, .combine='c') %do% {
cluster_k = kmeans(Z), k, nstart=50)
k_grid = seq(2, 30, by=1)
N = nrow(Z)
CH_grid = foreach(k = k_grid, .combine='c') %do% {
cluster_k = kmeans(Z, k, nstart=50)
W = cluster_k$tot.withinss
B = cluster_k$betweenss
CH = (B/W)*((N-k)/(k-1))
CH
}
plot(k_grid,CH_grid)
CH_result <- as.data.frame(c(k_grid,CH_grid))
View(CH_result)
CH_result <- as.data.frame(cbind(k_grid,CH_grid))
View(CH_result)
View(CH_result)
km = kmeans(Z, 2, nstart=50)
View(km)
ggcorrplot::ggcorrplot(cor(Z), hc.order = TRUE)
max(CH_result)
pca2 = prcomp(Z, scale=TRUE, rank=8)
ggplot(pca2, aes(x = PC1, y = PC2, color = wine_type)) +
geom_point(alpha = 0.7) +
theme_bw() +
labs(title = "PCA Plot of Wine Data", x = "PC1", y = "PC2") +
theme(legend.title = element_text(size = 12), legend.text = element_text(size = 10))
View(data)
View(Z)
ggplot(pca2, aes(x = PC1, y = PC2, color = travel)) +
geom_point(alpha = 0.7) +
theme_bw() +
labs(title = "PCA Plot of Wine Data", x = "PC1", y = "PC2") +
theme(legend.title = element_text(size = 12), legend.text = element_text(size = 10))
ggplot(pca2, aes(x = PC1, y = PC2)) +
geom_point(alpha = 0.7) +
theme_bw() +
labs(title = "PCA Plot of Wine Data", x = "PC1", y = "PC2") +
theme(legend.title = element_text(size = 12), legend.text = element_text(size = 10))
ggplot(pca2, aes(x = PC1, y = PC2))
View(pca2)
View(pca2)
pca2 = prcomp(Z, scale=TRUE, rank=8)
View(pca2)
ggplot(pca2, aes(x = PC1, y = PC2))
pca2_data <- as.data.frame(pca_result$x[, 1:2])
pca2 = prcomp(Z, scale=TRUE, rank=8)
pca2_data <- as.data.frame(pca2$x[, 1:2])
colnames(pca_data) <- c("PC1", "PC2")
colnames(pca2_data) <- c("PC1", "PC2")
ggplot(pca2_data, aes(x = PC1, y = PC2)) +
geom_point(alpha = 0.7) +
theme_bw() +
labs(title = "PCA Plot of Wine Data", x = "PC1", y = "PC2") +
theme(legend.title = element_text(size = 12), legend.text = element_text(size = 10))
View(pca2)
View(pca2_data)
pca2_data <- as.data.frame(pca2$x[, 1:8])
View(pca2_data)
View(pca2)
View(pca2_data)
View(pca2_data)
View(data)
pca2_data <- as.data.frame(cbind(pca2$x[, 1:8],Z))
View(pca2_data)
ggplot(pca2_data, aes(x = chatter, y = travel, color = PC1)) +
geom_point(alpha = 0.7) +
theme_bw() +
labs(title = "PCA Plot of Wine Data", x = "PC1", y = "PC2") +
theme(legend.title = element_text(size = 12), legend.text = element_text(size = 10))
ggplot(pca2_data, aes(x = chatter, y = travel, color = PC1)) +
geom_point(alpha = 0.7) +
theme_bw() +
#labs(title = "PCA Plot of Wine Data", x = "PC1", y = "PC2") +
theme(legend.title = element_text(size = 12), legend.text = element_text(size = 10))
View(Z)
ggplot(pca2_data, aes(x = family, y = food, color = PC1)) +
geom_point(alpha = 0.7) +
theme_bw() +
#labs(title = "PCA Plot of Wine Data", x = "PC1", y = "PC2") +
theme(legend.title = element_text(size = 12), legend.text = element_text(size = 10))
ggplot(pca2_data, aes(x = family, y = food, color = PC2)) +
geom_point(alpha = 0.7) +
theme_bw() +
#labs(title = "PCA Plot of Wine Data", x = "PC1", y = "PC2") +
theme(legend.title = element_text(size = 12), legend.text = element_text(size = 10))
ggplot(pca2_data, aes(x = family, y = food, color = PC3)) +
geom_point(alpha = 0.7) +
theme_bw() +
#labs(title = "PCA Plot of Wine Data", x = "PC1", y = "PC2") +
theme(legend.title = element_text(size = 12), legend.text = element_text(size = 10))
ggplot(pca2_data, aes(x = family, y = food, color = PC4)) +
geom_point(alpha = 0.7) +
theme_bw() +
#labs(title = "PCA Plot of Wine Data", x = "PC1", y = "PC2") +
theme(legend.title = element_text(size = 12), legend.text = element_text(size = 10))
pca2 = prcomp(Z, scale=TRUE, rank=2)
pca2_data <- as.data.frame(cbind(pca2$x[, 1:2],Z))
ggplot(pca2_data, aes(x = family, y = food, color = PC4)) +
geom_point(alpha = 0.7) +
theme_bw() +
#labs(title = "PCA Plot of Wine Data", x = "PC1", y = "PC2") +
theme(legend.title = element_text(size = 12), legend.text = element_text(size = 10))
ggplot(pca2_data, aes(x = family, y = food, color = PC2)) +
geom_point(alpha = 0.7) +
theme_bw() +
#labs(title = "PCA Plot of Wine Data", x = "PC1", y = "PC2") +
theme(legend.title = element_text(size = 12), legend.text = element_text(size = 10))
ggcorrplot::ggcorrplot(cor(Z), hc.order = TRUE)
play_list <- read.csv("playlists.csv")
library(arules)
install.packages("arules")
library(arules)
data("Groceries")
View(Groceries)
frequent_itemsets <- apriori(Groceries, parameter = list(supp = 0.1))
View(Groceries)
frequent_itemsets <- apriori(play_list, parameter = list(supp = 0.1))
View(play_list)
frequent_itemsets <- apriori(play_list$grocery, parameter = list(supp = 0.1))
data <- play_list$grocery
frequent_itemsets <- apriori(data, parameter = list(supp = 0.1))
data("Groceries")
frequent_itemsets <- apriori(Groceries, parameter = list(supp = 0.1))
inspect(frequent_itemsets)
inspect(frequent_itemsets)
play_list <- read.csv("playlists.csv")
play_list_trans <- read.transactions(data = play_list, format = "basket")
play_list_trans <- read.transactions(data = play_list$grocery, format = "basket")
View(Groceries)
transactions_trans <- read.transactions(data = play_list,
format = "single",
cols = c("transaction_id", "item_id"))
View(play_list)
transactions_trans <- read.transactions(data = play_list$grocery,
format = "single",
cols = c("item_id"))
